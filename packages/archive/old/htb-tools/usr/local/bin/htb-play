#!/bin/sh

detect_virt=$(systemd-detect-virt)
if ([ $detect_virt == "docker" ] || [ $detect_virt == "podman" ]) && [ -z $DISPLAY ]; then
    appkey=$(cat /run/secrets/htb-api)
else
    appkey=$(secret-tool lookup htb-api user-htb-api)
fi

machine_json_file="$HOME/.machine.json"
table_file="$HOME/.table.txt"

RESTORE='\033[0m'

RED='\033[00;31m'
GREEN='\033[00;32m'
YELLOW='\033[00;33m'
BLUE='\033[00;34m'
PURPLE='\033[00;35m'
CYAN='\033[00;36m'
LIGHTGRAY='\033[00;37m'

LRED='\033[01;31m'
LGREEN='\033[01;32m'
LYELLOW='\033[01;33m'
LBLUE='\033[01;34m'
LPURPLE='\033[01;35m'
LCYAN='\033[01;36m'
WHITE='\033[01;37m'


############################################################
# Banner                                                   #
############################################################

printf '%b\n' "$(base64 -d <<<"H4sIAAAAAAAAA+1buw6DMAzc+xVZWlUoSlCZqn5K+wv8/9oHUgkQIEBCDtueqlOHi+/imICVihunsL+9yqp6lo/7rb42P+t1iB1CcVjqWAzxkW3ZCtJEkH0QvU5GtGWkQ8wnyG5tu0h5g0Y/XhqME2jsEno7RHmyxVkbT9Bdbl9sV2g0rnsiymeDf9At/cZjBTSSCXfDbHx9wSghXSsQOQTnVW6jQCO/RUdaMkbLTYgP0EiLnagjU7Yk239wtbXl1FQMEd00Vp1GC41jXiT3CZRva2g5gJ2bKNbbomhysOtlTHbjE3oKWYcwb3ecM5Gf8dmXfnyk17gx9aih/JJgiBSeh1K+ygNUqZHbAtFENBFNRBPRRDQRTUSTuJoc8jLKl0VhFN8bZzR66RAs8Tp2UnQvz6zuGu4XZJ/BC0R/oSUpHeJ+ET/4GJbR9bxCEL4hccjuY7v7vA48bDe2DjG5t5yhO9hlLx5rjc/8kD1wBVncoox5ZHpMUhyUsYxNRMAILtp6otXA0RG4BcnZ4O3J+cuWwxtaDodVdT0AAA==" | gunzip)" #User printf for colored output
echo

############################################################
# Help                                                     #
############################################################
Help()
{
   # Display Help
   echo "HTB Play allows you to spawn Hack The Box machines from CLI."
   echo
   echo "$(basename "$0") [-h] [-a] [-m] <machine-name> [-r] [-s]"
   echo
   echo "Options:"
   echo "a     List active machines."
   echo "h     Print this Help."
   echo "m     Specify the machine name to play."
   echo "r     List retired machines."
   echo "s     List starting point machines."
   echo
   echo "Usage Examples:"
   echo "htb-play"
   echo "htb-play -a"
   echo "htb-play -m RouterSpace"
   echo
}

##############################################################################################
#                                       Print Table                                          #
# https://stackoverflow.com/questions/12768907/how-can-i-align-the-columns-of-tables-in-bash #
##############################################################################################

function printTable()
{
    local -r delimiter="${1}"
    local -r data="$(removeEmptyLines "${2}")"

    if [[ "${delimiter}" != '' && "$(isEmptyString "${data}")" = 'false' ]]
    then
        local -r numberOfLines="$(wc -l <<< "${data}")"

        if [[ "${numberOfLines}" -gt '0' ]]
        then
            local table=''
            local i=1

            for ((i = 1; i <= "${numberOfLines}"; i = i + 1))
            do
                local line=''
                line="$(sed "${i}q;d" <<< "${data}")"

                local numberOfColumns='0'
                numberOfColumns="$(awk -F "${delimiter}" '{print NF}' <<< "${line}")"

                # Add Line Delimiter

                if [[ "${i}" -eq '1' ]]
                then
                    table="${table}$(printf '%s#+' "$(repeatString '#+' "${numberOfColumns}")")"
                fi

                # Add Header Or Body

                table="${table}\n"

                local j=1

                for ((j = 1; j <= "${numberOfColumns}"; j = j + 1))
                do
                    table="${table}$(printf '#| %s' "$(cut -d "${delimiter}" -f "${j}" <<< "${line}")")"
                done

                table="${table}#|\n"

                # Add Line Delimiter

                if [[ "${i}" -eq '1' ]] || [[ "${numberOfLines}" -gt '1' && "${i}" -eq "${numberOfLines}" ]]
                then
                    table="${table}$(printf '%s#+' "$(repeatString '#+' "${numberOfColumns}")")"
                fi
            done

            if [[ "$(isEmptyString "${table}")" = 'false' ]]
            then
                echo -e "${table}" | column -s '#' -t | awk '/^\+/{gsub(" ", "-", $0)}1'
            fi
        fi
    fi
}

function removeEmptyLines()
{
    local -r content="${1}"

    echo -e "${content}" | sed '/^\s*$/d'
}

function repeatString()
{
    local -r string="${1}"
    local -r numberToRepeat="${2}"

    if [[ "${string}" != '' && "${numberToRepeat}" =~ ^[1-9][0-9]*$ ]]
    then
        local -r result="$(printf "%${numberToRepeat}s")"
        echo -e "${result// /${string}}"
    fi
}

function isEmptyString()
{
    local -r string="${1}"

    if [[ "$(trimString "${string}")" = '' ]]
    then
        echo 'true' && return 0
    fi

    echo 'false' && return 1
}

function trimString()
{
    local -r string="${1}"

    sed 's,^[[:blank:]]*,,' <<< "${string}" | sed 's,[[:blank:]]*$,,'
}

############################################################
#                       Progress Bar                       #
#          https://github.com/roddhjav/progressbar         #
############################################################

readonly Bold='\e[1m'
readonly Bred='\e[1;31m'
readonly Byellow='\e[1;33m'
readonly reset='\e[0m'

__die() { echo -e " ${Bred}[x]${reset} ${Bold}Error :${reset} ${*}" >&2 && exit 1; }

__progressbar_error() {
	echo "A valid ${*} must be supplied to initialise 'progressbar'."
}

__progressbar_theme() {
	[[ -z "${ILoveCandy}" ]] && ILoveCandy=false
	[[ -z "${Braket_in}" ]]  && Braket_in="["
	[[ -z "${Braket_out}" ]] && Braket_out="]"

	# Definition of the diferent cursors
	if [[ "${ILoveCandy}" == true ]]; then
		[[ -z "${Cursor_done}" ]]     && Cursor_done="-"
		[[ -z "${Cursor_not_done}" ]] && Cursor_not_done="o  "
		[[ -z "${Cursor}" ]]          && Cursor="${Byellow}C${reset}"
		[[ -z "${Cursor_small}" ]]    && Cursor_small="${Byellow}c${reset}"
	else
		[[ -z "${Cursor_done}" ]]     && Cursor_done="#"
		[[ -z "${Cursor_not_done}" ]] && Cursor_not_done="-"
	fi
}

progressbar() {
	[[ -z "${1}" ]] && __die "$(__progressbar_error bar title)"
	[[ -z "${2}" ]] && __die "$(__progressbar_error curent position)"
	local title="${1}" current="${2}" total="${3:-100}"
	local msg1="${4}" msg2="${5}" msg3="${6}"
	__progressbar_theme

	cols=$(tput cols)
	(( block=cols/3-cols/20 ))
	(( _title=block-${#title}-1 ))
	(( _msg=block-${#msg1}-${#msg2}-${#msg3}-3 ))

	_title=$(printf "%${_title}s")
	_msg=$(printf "%${_msg}s")

	(( _pbar_size=cols-2*block-8 ))
	(( _progress=current*100/total ))
	(( _current=current*_pbar_size ))
	(( _current=_current/total ))
	(( _total=_pbar_size-_current ))

	if [[ "${ILoveCandy}" == true ]]; then
		# First print <_dummy_block> [ o  o  o  o  o ] _progress%
		(( _motif=_pbar_size/3 ))
		(( _dummy_block=2*block+1 ))
		_dummy_block=$(printf "%${_dummy_block}s")
		_motif=$(printf "%${_motif}s")
		printf "\r${_dummy_block}${Braket_in} ${_motif// /${Cursor_not_done}}${Braket_out} ${_progress}%%"

		# Second print <title> <msg> [-----C
		_current_pair=${_current}
		(( _current=_current-1 ))
		(( _total=_total ))
		_current=$(printf "%${_current}s")
		_total=$(printf "%${_total}s")

		printf "\r ${title}${_title} ${_msg}${msg1} ${msg2} ${msg3} "
		printf "${Braket_in}${_current// /${Cursor_done}}"
		if [[ $(( _current_pair % 2)) -eq 0 ]]; then
			printf "${Cursor}"
		else
			printf "${Cursor_small}"
		fi

		# Transform the last "C" in "-"
		if [[ "${_progress}" -eq 100 ]]; then
			printf "\r ${title}${_title} ${_msg}${msg1} ${msg2} ${msg3} ${Braket_in}${_current// /${Cursor_done}}${Cursor_done}${Braket_out}\n"
		fi
	else
		_current=$(printf "%${_current}s")
		_total=$(printf "%${_total}s")
		printf "\r ${title}${_title} ${_msg}${msg1} ${msg2} ${msg3} "
		printf "${Braket_in}${_current// /${Cursor_done}}${_total// /${Cursor_not_done}}${Braket_out} ${_progress}%%"
	fi
}

############################################################
#                                                          #
############################################################

ListMachines()
{
    mtype=$1
    echo
    echo -e "${LYELLOW}Connecting to HTB server...${RESTORE}"
    echo

    if [ "$mtype" == "active" ]; then
        { # try
            curl -s --location --request GET https://www.hackthebox.com/api/v4/machine/list -H "Authorization: Bearer $appkey" | jq > $machine_json_file
        } || { # catch
            echo -e "\e[31mError. Maybe your API key is incorrect or expired. Renew your API key by running htb-update.\e[0m"
            rm -rf $machine_json_file
            exit 1
        }
    elif [ "$mtype" == "retired" ]; then
        { # try
            curl -s --location --request GET https://www.hackthebox.com/api/v4/machine/list/retired -H "Authorization: Bearer $appkey" | jq > $machine_json_file
        } || { # catch
            echo -e "\e[31mError. Maybe your API key is incorrect or expired. Renew your API key by running htb-update.\e[0m"
            rm -rf $machine_json_file
            exit 1
        }
    fi

    echo -e "${LGREEN}Done.${RESTORE}"
    echo
    echo -e "${LYELLOW}Calculating the number of machines...${RESTORE}"
    echo
    sleep 1
    count=$(jq -r '.info | length' $machine_json_file)
    array_index_free_machines=()
    echo -e "${LGREEN}Done.${RESTORE}"
    echo

    echo -e "ID,${LGREEN}Name${RESTORE},${LYELLOW}Points${RESTORE},${LCYAN}Difficulty${RESTORE},${LYELLOW}User Pwned${RESTORE},${LRED}Root Pwned${RESTORE},${LGREEN}Is it Free?${RESTORE}" > $table_file
    for sequence in $(seq $count)
    do
      let index=$sequence-1
      id=$(jq -r ".info[$index].id" $machine_json_file)
      name=$(jq -r ".info[$index].name" $machine_json_file)
      points=$(jq -r ".info[$index].points" $machine_json_file)
      difficultyText=$(jq -r ".info[$index].difficultyText" $machine_json_file)
      userpwn=$(jq -r ".info[$index].authUserInUserOwns" $machine_json_file)
      rootpwn=$(jq -r ".info[$index].authUserInRootOwns" $machine_json_file)
      free=$(jq -r ".info[$index].free" $machine_json_file)

      # Display variables
      if [ $free = "true" ] && [ "$mtype" == "retired" ]; then
        array_index_free_machines+=($index)
      fi

      if [ $userpwn != "null" ]; then
        userpwn="${LYELLOW}$userpwn${RESTORE}"
      fi

      if [ $rootpwn != "null" ]; then
        rootpwn="${LRED}$rootpwn${RESTORE}"
      fi

      echo "$id,${LGREEN}$name${RESTORE},${LYELLOW}$points${RESTORE},${LCYAN}$difficultyText${RESTORE},$userpwn,$rootpwn,${LGREEN}$free${RESTORE}" >> $table_file
      progressbar "Loading machines" $sequence $count
    done

    printTable ',' "$(cat $table_file)"
    rm -rf $table_file

    if [ "$mtype" == "retired" ]; then
        echo
        echo -e "${LGREEN}Today, the free retired machines are:${RESTORE}"
        echo
        for elem in "${array_index_free_machines[@]}"
        do
            id=$(jq -r ".info[$elem].id" $machine_json_file)
            name=$(jq -r ".info[$elem].name" $machine_json_file)
            points=$(jq -r ".info[$elem].points" $machine_json_file)
            difficultyText=$(jq -r ".info[$elem].difficultyText" $machine_json_file)
            free=$(jq -r ".info[$elem].free" $machine_json_file)
            echo $name
        done
    fi

    rm -rf $machine_json_file
    echo
}

ListStartingPointMachines()
{
    echo
    echo -e "${LYELLOW}Connecting to HTB server...${RESTORE}"
    echo

    tiers=3

    for index in $(seq $tiers)
    do
        { # try
            curl -s --location --request GET https://www.hackthebox.com/api/v4/sp/tier/$index -H "Authorization: Bearer $appkey" | jq > $machine_json_file
        } || { # catch
            echo -e "\e[31mError. Maybe your API key is incorrect or expired. Renew your API key by running htb-update.\e[0m"
            rm -rf $machine_json_file
            exit 1
        }

        tier=$(($index-1))
        echo -e "${LYELLOW}Tier $tier Starting Point machines:${RESTORE}"
        echo
        sleep 1
        count=$(jq -r '.data.machines | length' $machine_json_file)
        array_index_free_machines=()

        echo -e "ID,${LGREEN}Name${RESTORE},${LCYAN}Difficulty${RESTORE}" > $table_file
        for sequence in $(seq $count)
        do
          let index=$sequence-1
          id=$(jq -r ".data.machines[$index].id" $machine_json_file)
          name=$(jq -r ".data.machines[$index].name" $machine_json_file)
          difficultyText=$(jq -r ".data.machines[$index].difficultyText" $machine_json_file)
          #userpwn=$(jq -r ".data.machines[$index].authUserInUserOwns" $machine_json_file)
          #rootpwn=$(jq -r ".data.machines[$index].authUserInRootOwns" $machine_json_file)

          #if [ $userpwn != "null" ]; then
          #  userpwn="${LYELLOW}$userpwn${RESTORE}"
          #fi

          #if [ $rootpwn != "null" ]; then
          #  rootpwn="${LRED}$rootpwn${RESTORE}"
          #fi

          echo "$id,${LGREEN}$name${RESTORE},${LCYAN}$difficultyText${RESTORE}" >> $table_file
          #progressbar "Loading machines" $sequence $count
        done

        printTable ',' "$(cat $table_file)"
        rm -rf $table_file

        rm -rf $machine_json_file
        echo
    done
}

############################################################
# Process the input options. Add options as needed.        #
############################################################
# Get the options
while getopts ":ahm:rs" option; do #When using getopts, putting : after an option character means that it requires an argument (i.e., 'i:' requires arg).
   case "${option}" in
      a) # Enter a command
         flag="active"
         ListMachines "$flag" >&2
         exit 0
         ;;
      h) # display Help
         Help >&2
         exit 0
         ;;
      m) # Enter a command
         machine_name=$OPTARG
         ;;
      r) # Enter a command
         flag="retired"
         ListMachines "$flag" >&2
         exit 0
         ;;
      s) # Enter a command
         ListStartingPointMachines >&2
         exit 0
         ;;
      : )
        echo "Missing option argument for -$OPTARG" >&2; exit 0;;
      #*  )
        #echo "Unimplemented option: -$OPTARG" >&2; exit 0;;
     \?) # Invalid option
         echo "Error: Invalid option" >&2
         ;;
   esac
done


echo
if [[ $# -eq 0 ]] ; then
    Help
    exit 0
fi

{ # try

    curl -s --location --request GET "https://www.hackthebox.com/api/v4/machine/profile/$machine_name" -H "Authorization: Bearer $appkey" | jq > $machine_json_file 
    
} || { # catch
    echo -e "\e[31mError. Maybe your API key is incorrect or expired. Renew your API key by running htb-update.\e[0m"
    rm -rf $machine_json_file
    exit 1
}

if cat $machine_json_file | grep -q "Machine not found"; then
    echo "Machine not found"
    rm -rf $machine_json_file
    exit 1
fi

name=$(jq -r ".info.name" $machine_json_file)
rm -rf $machine_json_file

htb-spawn $name
