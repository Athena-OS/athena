[Trigger]
Type = Package
Operation = Install
Operation = Upgrade
Target = systemd

[Action]
Description = Updating, copying, and signing systemd-boot for Secure Boot...
When = PostTransaction
Exec = /bin/bash -c 'set -euo pipefail

ESP="/boot/efi"
KEY="/etc/secureboot/keys/MOK.key"
CERT="/etc/secureboot/keys/MOK.crt"

EFI_SYS="${ESP}/EFI/systemd/systemd-bootx64.efi"
EFI_FALLBACK="${ESP}/EFI/BOOT/grubx64.efi"

log() {
    echo "[athena-sign-boot] $*" >&2
}

need() {
    if ! command -v "$1" >/dev/null 2>&1; then
        log "ERROR: missing required tool: $1"
        exit 1
    fi
}

need bootctl
need sbsign

# 1. Copy the latest systemd-boot binary from /usr/lib/... to the ESP
log "Installing latest systemd-boot into ESP..."
bootctl install --esp-path="${ESP}" >/dev/null

# 2. Sign main loader
if [ -f "${EFI_SYS}" ]; then
    log "Signing ${EFI_SYS}"
    sbsign --key "${KEY}" \
           --cert "${CERT}" \
           --output "${EFI_SYS}" \
           "${EFI_SYS}"
else
    log "WARNING: ${EFI_SYS} not found"
fi

# 3. Copy and sign fallback BOOTX64.EFI
if [ -f "${EFI_SYS}" ]; then
    mkdir -p "${ESP}/EFI/BOOT"
    cp "${EFI_SYS}" "${EFI_FALLBACK}"
    log "Signing fallback ${EFI_FALLBACK}"
    sbsign --key "${KEY}" \
           --cert "${CERT}" \
           --output "${EFI_FALLBACK}" \
           "${EFI_FALLBACK}"
else
    log "WARNING: cannot update fallback ${EFI_FALLBACK} (source missing)"
fi

chmod 0600 "${EFI_SYS}" "${EFI_FALLBACK}" 2>/dev/null || true

log "systemd-boot updated and signed."
'
