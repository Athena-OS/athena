#!/bin/bash

############################################################
# Help                                                     #
############################################################
Help()
{
   # Display Help
   echo "$(basename "$0") [-b <binary>] [-c <command>] [-d <directory>] [-g] [-h] [-p <package>] [-r] [-x <args>]"
   echo
   echo "Options:"
   echo "-b     Specify the binary to launch."
   echo "-c     Specify the command to launch."
   echo "-d     Specify the directory to land."
   echo "-g     Set if launching a GUI application."
   echo "-h     Print this Help."
   echo "-p     Specify the binary package."
   echo "-r     Run as root."
   echo "-x     Specify additional arguments to pass to the binary."
   echo
   echo "Usage Examples:"
   echo "$(basename "$0") -b burpsuite -g"
   echo "$(basename "$0") -b msfconsole -p metasploit"
   echo "$(basename "$0") -b nmap"
   echo "$(basename "$0") -b seclists -d /usr/share/payloads/seclists"
   echo "$(basename "$0") -c \"echo \"Disconnecting all VPN sessions...\";sudo killall openvpn\""
   echo
}

############################################################
# Process the input options. Add options as needed.        #
############################################################
# Get the options
while getopts ":b:c:d:ghp:rx:" option; do #When using getopts, putting : after an option character means that it requires an argument (i.e., 'i:' requires arg).
   case "${option}" in
      b) 
         binary=$OPTARG
         ;;
      c)
         command=$OPTARG
         ;;
      d)
         directory=$OPTARG
         ;;
      g)
         guiapp=true
         ;;
      h) # display Help
         Help >&2
         exit 0
         ;;
      p) 
         pkg=$OPTARG
         ;;
      r) 
         root=true
         ;;
      x) 
         args=$OPTARG
         ;;
      : )
        echo "Missing option argument for -$OPTARG" >&2; exit 0;;
      #*  )
        #echo "Unimplemented option: -$OPTARG" >&2; exit 0;;
     \?) # Invalid option
         echo "Error: Invalid option" >&2
         ;;
   esac
done

if [ $# -eq 0 ]; then
    echo "Error: no arguments provided."
    echo
    Help >&2
    exit 0
fi

temp_file=$(mktemp)
TERMINAL_EXEC="kitty --class shell -e"

if [[ -z "$command" ]]; then
  # Search for application
  if [ ! "$(command -v "$binary")" ] && [[ ! -d $directory ]]; then
    if [ -n "$pkg" ]; then
      if [[ -n "$NO_REPETITION" ]]; then
        echo "$binary is not installed. Installing..."
        sudo pacman -S "$pkg"
      else
        NO_REPETITION=1 $TERMINAL_EXEC /usr/bin/bash -c "echo \"$binary is not installed. Installing...\" && sudo pacman -S $pkg |& tee $temp_file;if grep -q "error:" "$temp_file"; then $SHELL;fi"
      fi
    else
      if [[ -n "$NO_REPETITION" ]]; then
        echo "$binary is not installed. Installing..."
        sudo pacman -S "$binary"
      else
        NO_REPETITION=1 $TERMINAL_EXEC /usr/bin/bash -c "echo \"$binary is not installed. Installing...\" && sudo pacman -S $binary |& tee $temp_file;if grep -q "error:" "$temp_file"; then $SHELL;fi"
      fi
    fi

    install_output=$(<"$temp_file")
    rm "$temp_file"
    # Check the output of the installation command for any error messages indicating a failure
    # Message printed on the calling terminal, not on the invoked one
    if echo "$install_output" | grep -q "error:"; then
        echo "Failed to install $binary. $binary package not found. Check if the binary has a different package name and use -p argument to specify it."
        exit 1
    fi
  fi

  if [[ "$root" ]] && [[ ! "$guiapp" ]]; then
    binary="echo '$binary requires root permission...';sudo $binary"
  elif [[ "$root" ]] && [[ "$guiapp" ]]; then
    binary=(pkexec "$binary")
  fi

  if [[ -n "$args" ]]; then
    binary+=" $args"
  fi

  if [[ -z "$directory" ]]; then
    if [[ -n "$NO_REPETITION" ]] || [[ "$guiapp" ]]; then
      "${binary[@]}"
    else
      NO_REPETITION=1 $TERMINAL_EXEC /usr/bin/bash -c "$binary;$SHELL"
    fi
  else
    if [[ -n "$NO_REPETITION" ]]; then
      cd $directory;$SHELL
    else
      NO_REPETITION=1 $TERMINAL_EXEC /usr/bin/bash -c "cd $directory;$SHELL"
    fi
  fi
else
    if [[ -n "$NO_REPETITION" ]]; then
      "${command[@]}"
    else
      NO_REPETITION=1 $TERMINAL_EXEC /usr/bin/bash -c "$command;$SHELL"
    fi
fi
