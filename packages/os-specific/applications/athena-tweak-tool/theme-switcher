#!/usr/bin/bash

##################################################################################################################
#tput setaf 0 = black
#tput setaf 1 = red
#tput setaf 2 = green
#tput setaf 3 = yellow
#tput setaf 4 = dark blue
#tput setaf 5 = purple
#tput setaf 6 = cyan
#tput setaf 7 = gray
#tput setaf 8 = light blue
##################################################################################################################

# Check if the number of command-line arguments is correct
if [ $# -ne 1 ]; then
    echo "Usage: $0 <chosen_design>"
    echo "       $0 --auto | -a    # Automatically detect installed design"
    echo "Available design: Cyborg | Graphite | HackTheBox | RedMoon | Samurai | Sweet | Temple"
    exit 1
fi

chosen_design="${1,,}"
detect_virt=$(systemd-detect-virt)

is_package_installed() {
    local package="$1"

    if command -v rpm &>/dev/null; then
        rpm -q "$package" &>/dev/null
    elif command -v dpkg &>/dev/null; then
        dpkg -l "$package" 2>/dev/null | grep -q "^ii"
    elif command -v pacman &>/dev/null; then
        pacman -Q "$package" &>/dev/null
    elif command -v apk &>/dev/null; then
        apk info -e "$package" &>/dev/null
    else
        echo "Unsupported package manager." >&2
        return 2
    fi
}

declare -A design_map=(
    ["cyborg"]="athena-cyborg-design"
    ["graphite"]="athena-graphite-design"
    ["hackthebox"]="athena-htb-design"
    ["redmoon"]="athena-redmoon-design"
    ["samurai"]="athena-samurai-design"
    ["sweet"]="athena-sweetdark-design"
    ["temple"]="athena-temple-design"
)

# Auto-detect design based on installed package
if [[ "$1" == "-a" || "$1" == "--auto" ]]; then
    for design in "${!design_map[@]}"; do
        if is_package_installed "${design_map[$design]}"; then
            chosen_design="$design"
            echo
            tput setaf 6
            echo "Auto-detected installed design: $chosen_design"
            tput sgr0
            echo
            break
        fi
    done

    if [[ -z "$chosen_design" ]]; then
        echo "No recognized design package found. Please install one of the following packages:"
        for pkg in "${design_map[@]}"; do echo "  - $pkg"; done
        exit 1
    fi
fi

# Remove directories
rm -rf "$HOME/.config/assets"
rm -rf "$HOME/.config/gtk-4.0"

# Create the gtk-4.0 directory
mkdir -p "$HOME/.config/gtk-4.0"

if [ "$chosen_design" == "cyborg" ]; then
    THEME="Gruvbox-Dark"
    GNOME_SHELL="Gruvbox-Dark"
    COLOR_SCHEMA="prefer-dark"
    ICONS="Material-Black-Mango-Suru"
    CURSOR="Fuchsia-Pop"
    BACKGROUND="/usr/share/backgrounds/athena/cyborg-gruv.png"
    CODIUM_THEME="Gruvbox Material Dark"
    KITTY_THEME="gruvbox_dark.conf"
    TMUX_THEME="gold"
    COLORBASE="gruvbox"
elif [ "$chosen_design" == "graphite" ]; then
    THEME="Graphite-Rimless-Dark"
    GNOME_SHELL="Graphite-Rimless-Dark"
    COLOR_SCHEMA="prefer-dark"
    ICONS="Tela-circle-black-dark"
    CURSOR="Bibata-Modern-Ice"
    BACKGROUND="/usr/share/backgrounds/athena/arch-ascii.png"
    CODIUM_THEME="Just Black"
    KITTY_THEME="Atom.conf"
    TMUX_THEME="snow"
    COLORBASE="blue"
elif [ "$chosen_design" == "hackthebox" ]; then
    THEME="Matrix-Dark"
    GNOME_SHELL="Matrix-Dark"
    COLOR_SCHEMA="prefer-dark"
    ICONS="Matrix-Sweet"
    CURSOR="Afterglow-Dracula-Green"
    BACKGROUND="/usr/share/backgrounds/athena/hackthebox.png"
    CODIUM_THEME="Hack The Box"
    KITTY_THEME="Box.conf"
    TMUX_THEME="forest"
    COLORBASE="green"
elif [ "$chosen_design" == "redmoon" ]; then
    THEME="Nightfox-Dark"
    GNOME_SHELL="Nightfox-Dark"
    COLOR_SCHEMA="prefer-dark"
    ICONS="Material-Black-Cherry-Suru"
    CURSOR="Bibata-Modern-DarkRed"
    BACKGROUND="/usr/share/backgrounds/athena/redmoon.png"
    CODIUM_THEME="red-blood"
    KITTY_THEME="CrayonPonyFish.conf"
    TMUX_THEME="redwine"
    COLORBASE="red"
elif [ "$chosen_design" == "samurai" ]; then
    THEME="Tokyonight-Dark"
    GNOME_SHELL="Tokyonight-Dark"
    COLOR_SCHEMA="prefer-dark"
    ICONS="Tokyonight-Dark"
    CURSOR="oreo_blue_cursors"
    BACKGROUND="/usr/share/backgrounds/athena/samurai-girl.jpg"
    CODIUM_THEME="Tokyo Night Storm"
    KITTY_THEME="Tokyo_Night_Storm.conf"
    TMUX_THEME="sky"
    COLORBASE="cyan"
elif [ "$chosen_design" == "sweet" ]; then
    THEME="Sweet-Dark-v40"
    GNOME_SHELL="Sweet-Dark-v40"
    COLOR_SCHEMA="prefer-dark"
    ICONS="Sweet-Purple"
    CURSOR="oreo_spark_purple_cursors"
    BACKGROUND="/usr/share/backgrounds/athena/neon-circle.jpg"
    CODIUM_THEME="Radical"
    KITTY_THEME="AdventureTime.conf"
    TMUX_THEME="violet"
    COLORBASE="purple"
elif [ "$chosen_design" == "temple" ]; then
    THEME="Tokyonight-Dark"
    GNOME_SHELL="Tokyonight-Dark"
    COLOR_SCHEMA="prefer-dark"
    ICONS="FairyWren_Dark"
    CURSOR="oreo_blue_cursors"
    BACKGROUND="/usr/share/backgrounds/athena/temple.png"
    CODIUM_THEME="Tokyo Night Storm"
    KITTY_THEME="Tokyo_Night_Storm.conf"
    TMUX_THEME="sky"
    COLORBASE="cyan"
else
    echo "Please choose between the following design: Cyborg, Graphite, HackTheBox, RedMoon, Samurai, Sweet, Temple"
    exit 1
fi

echo "$DESKTOP_SESSION session detected."

apply_menu_icons() {
    mkdir -p "$HOME/.config/kando/icon-themes/athena-theme"
    mkdir -p "$HOME/.local/share/icons/hicolor/scalable/apps"
    mkdir -p "$HOME/.local/share/icons/hicolor/scalable/categories"

    # Here 'hicolor' is used because all icon themes automatically inherit hicolor icons from system dirs and home dirs
    cp -rf /usr/share/athena-$COLORBASE-base/icons/apps/* "$HOME/.config/kando/icon-themes/athena-theme/"
    cp -rf /usr/share/athena-$COLORBASE-base/icons/categories/* "$HOME/.config/kando/icon-themes/athena-theme/"
    cp -rf /usr/share/athena-$COLORBASE-base/icons/apps/* "$HOME/.local/share/icons/hicolor/scalable/apps/"
    cp -rf /usr/share/athena-$COLORBASE-base/icons/categories/* "$HOME/.local/share/icons/hicolor/scalable/categories/"
}

# /home/<user>/.config/gtk-3.0/settings.ini
apply_gtk3() {
	if [ -f $HOME/.config/gtk-3.0/settings.ini ]; then

		echo
		tput setaf 3
		echo "################################################################"
		echo "################### Applying gtk-3.0 settings"
		echo "################################################################"
		tput sgr0
		echo

		sed -i "s/gtk-theme-name=.*/gtk-theme-name=$THEME/g" \
		$HOME/.config/gtk-3.0/settings.ini
		sed -i "s/gtk-icon-theme-name=.*/gtk-icon-theme-name=$ICONS/g" \
		$HOME/.config/gtk-3.0/settings.ini
		sed -i "s/gtk-cursor-theme-name.*/gtk-cursor-theme-name=$CURSOR/g" \
		$HOME/.config/gtk-3.0/settings.ini	
		sed -i "s/gtk-font-name=.*/gtk-font-name=$FONT/g" \
		$HOME/.config/gtk-3.0/settings.ini
	fi
}

# /home/<user>/.config/gtk-4.0/settings.ini
apply_gtk4() {
	echo
	tput setaf 3
	echo "################################################################"
	echo "################### Applying gtk-4.0 settings"
	echo "################################################################"
	tput sgr0
	echo

	if [ -d /usr/share/themes/$THEME/gtk-4.0/assets ]; then
        ln -sf "/usr/share/themes/$THEME/gtk-4.0/assets" "$HOME/.config/gtk-4.0/assets"
    fi
	if [ -f /usr/share/themes/$THEME/gtk-4.0/gtk.css ]; then
        ln -sf "/usr/share/themes/$THEME/gtk-4.0/gtk.css" "$HOME/.config/gtk-4.0/gtk.css"
    fi
	if [ -f /usr/share/themes/$THEME/gtk-4.0/gtk-dark.css ]; then
        ln -sf "/usr/share/themes/$THEME/gtk-4.0/gtk-dark.css" "$HOME/.config/gtk-4.0/gtk-dark.css"
    fi
	if [ -d /usr/share/themes/$THEME/assets ]; then
        ln -sf "/usr/share/themes/$THEME/assets" "$HOME/.config/assets"
    fi 
}

# I add check on tty because on Live Environment, when I run startx (that is run in tty), $DESKTOP_SESSION is empty
if [[ "$DESKTOP_SESSION" =~ "xfce" ]] || [[ $(tty) == */dev/tty* ]] || [[ "$detect_virt" == "wsl" ]]; then
    # Need to wait for some time to wait for the needed xfce process to be loaded, to prevent to have a blank background
    # Be aware that for Arch and Fedora the BACKGROUND value must be changed above to prevent blank screen.
    sleep 0.5
    xfconf-query -c xsettings -p /Net/ThemeName -s "$THEME"
    xfconf-query -c xsettings -p /Net/IconThemeName -s "$ICONS"
    xfconf-query -c xsettings -p /Gtk/CursorThemeName -s "$CURSOR"
    xfconf-query -c xfwm4 -p /general/theme -s "Everblush-xfwm"

    # Copy is needed for the first start because xfconf-query command seems to not work there
    # Using # as delimiter of sed instead of / since $BACKGROUND contains / that could trigger sed error
    sed -i "s#/usr/share/backgrounds/athena/mechanic-keyboard.png#$BACKGROUND#g" "$HOME/.config/xfce4/xfconf/xfce-perchannel-xml/xfce4-desktop.xml"
    # Iterate through the monitors and set the wallpaper
    for x in $(xfconf-query -c xfce4-desktop -lv | grep last-image | awk '{print $1}'); do xfconf-query -c xfce4-desktop -p $x -s $BACKGROUND; done
fi

if [[ "$DESKTOP_SESSION" =~ "plasma" ]]; then
    plasma-apply-lookandfeel -a org.kde.breezedark.desktop # It applies Plasma Global Theme and Color Scheme too
    dbus-send --session --dest=org.kde.GtkConfig --type=method_call /GtkConfig org.kde.GtkConfig.setGtkTheme "string:$THEME"
    /usr/libexec/plasma-changeicons "$ICONS"
    plasma-apply-cursortheme "$CURSOR"
    qdbus-qt6 org.kde.plasmashell /PlasmaShell org.kde.PlasmaShell.evaluateScript "var allDesktops = desktops(); for(i=0; i<allDesktops.length; i++) { myDesktop=allDesktops[i]; print(myDesktop); myDesktop.currentConfigGroup = Array(\"Wallpaper\",\"org.kde.image\",\"General\");var wallpaper = \"$BACKGROUND\"; myDesktop.writeConfig(\"Image\", wallpaper);print(myDesktop.readConfig(\"Image\"));}"
    kwriteconfig6 --file kscreenlockerrc --group Greeter --group Wallpaper --group org.kde.image --group General --key Image "$BACKGROUND"
fi

if [[ "$DESKTOP_SESSION" =~ "mate" ]]; then
    dconf write /org/mate/desktop/interface/gtk-theme "'$THEME'"
    dconf write /org/mate/marco/general/theme "'$THEME'"
    dconf write /org/mate/desktop/interface/icon-theme "'$ICONS'"
    dconf write /org/mate/desktop/peripherals/mouse/cursor-theme "'$CURSOR'"
    dconf write /org/mate/desktop/background/picture-filename "'$BACKGROUND'"
fi

if [[ "$DESKTOP_SESSION" =~ "cinnamon" ]]; then
    gsettings set org.cinnamon.desktop.interface gtk-theme ""
    gsettings set org.cinnamon.desktop.wm.preferences theme ""
    sleep 1
    gsettings set org.cinnamon.desktop.interface gtk-theme "$THEME"
    gsettings set org.cinnamon.desktop.wm.preferences theme "$THEME"

    gsettings set org.cinnamon.desktop.interface gtk-color-scheme "$COLOR_SCHEMA"
    gsettings set org.cinnamon.desktop.interface icon-theme "$ICONS"
    gsettings set org.cinnamon.desktop.interface cursor-theme "$CURSOR"
    gsettings set org.cinnamon.desktop.background picture-uri ""
    gsettings set org.cinnamon.desktop.background picture-uri "file://$BACKGROUND"
    gsettings set org.cinnamon.desktop.background picture-options "stretched"
fi

#if [[ -n "$HYPRLAND_INSTANCE_SIGNATURE" ]] || [[ "$DESKTOP_SESSION" =~ "hyprland" ]]; then
#    cp -rf "$BACKGROUND" "$HOME/.config/hypr/wallpaper" 2>/dev/null
    #pkill swaybg 2>/dev/null
    #swaybg -i "$HOME/.config/eww/images/wallpaper/wallpaper" 2>/dev/null & #Note that swaybg needs to be runned in background
#    swww img "$BACKGROUND"
#    gsettings set org.gnome.desktop.interface gtk-theme "$THEME"
#    gsettings set org.gnome.desktop.interface icon-theme "$ICONS"
#    gsettings set org.gnome.desktop.interface color-scheme "$COLOR_SCHEMA"
#    hyprctl setcursor "$CURSOR" 24 2>/dev/null
#fi

if [[ "$DESKTOP_SESSION" =~ "gnome" ]]; then
    gsettings set org.gnome.desktop.interface gtk-theme ""
    gsettings set org.gnome.desktop.wm.preferences theme ""
    gsettings set org.gnome.shell.extensions.user-theme name ""
    sleep 1
    gsettings set org.gnome.desktop.interface gtk-theme "$THEME"
    gsettings set org.gnome.desktop.wm.preferences theme "$THEME"
    gsettings set org.gnome.shell.extensions.user-theme name "$GNOME_SHELL" 2>/dev/null

    gsettings set org.gnome.desktop.interface color-scheme "$COLOR_SCHEMA"
    gsettings set org.gnome.desktop.interface icon-theme "$ICONS"
    gsettings set org.gnome.desktop.interface cursor-theme "$CURSOR"
    gsettings set org.gnome.desktop.background picture-uri-dark ""
    gsettings set org.gnome.desktop.background picture-uri-dark "file://$BACKGROUND"
    gsettings set org.gnome.desktop.background picture-uri ""
    gsettings set org.gnome.desktop.background picture-uri "file://$BACKGROUND"
    gsettings set org.gnome.desktop.background picture-options "stretched"
fi

# VSCodium fallback
VSCODIUM_USER="$HOME/.config/VSCodium/User"
VSCODIUM_FILE="$VSCODIUM_USER/settings.json"

if [[ -d "/etc/skel/.vscode-oss" ]]; then
  echo "⚙️ Restoring VSCodium themes..."
  cp -rf "/etc/skel/.vscode-oss" "$HOME/"
fi

if [[ ! -f "$VSCODIUM_FILE" && -f "/etc/skel/.config/VSCodium/User/settings.json" ]]; then
  echo "⚙️ Restoring default VSCodium settings..."
  mkdir -p "$VSCODIUM_USER"
  cp "/etc/skel/.config/VSCodium/User/settings.json" "$VSCODIUM_FILE"
fi
sed -i "s/\"workbench.colorTheme\":.*/\"workbench.colorTheme\": \"$CODIUM_THEME\",/g" "$VSCODIUM_FILE"

# Kitty fallback
KITTY_DIR="$HOME/.config/kitty"
KITTY_FILE="$KITTY_DIR/current-theme.conf"
if [[ ! -f "$KITTY_FILE" && -f "/etc/skel/.config/kitty/current-theme.conf" ]]; then
  echo "🎨 Restoring default Kitty theme..."
  mkdir -p "$KITTY_DIR"
  cp "/etc/skel/.config/kitty/current-theme.conf" "$KITTY_FILE"
fi
cp -f "$KITTY_DIR/kitty-themes/themes/$KITTY_THEME" "$KITTY_FILE" 2>/dev/null

# Tmux fallback
TMUX_FILE="$HOME/.tmux.conf"
if [[ ! -f "$TMUX_FILE" && -f "/etc/skel/.tmux.conf" ]]; then
  echo "🧩 Restoring default tmux config..."
  cp "/etc/skel/.tmux.conf" "$TMUX_FILE"
fi
sed -i "s/set -g @tmux_power_theme.*/set -g @tmux_power_theme '$TMUX_THEME'/g" "$TMUX_FILE"

apply_gtk3
apply_gtk4
apply_menu_icons

echo
tput setaf 3
echo "################################################################"
echo "The settings have been changed to"
echo "Theme    : "$THEME
echo "Icons    : "$ICONS
echo "Cursor   : "$CURSOR
echo "################################################################"
tput sgr0
