diff --git a/src/main.ts b/src/main.ts
index c391916..6204940 100644
--- a/src/main.ts
+++ b/src/main.ts
@@ -14,16 +14,37 @@ function initGreeter() {
 		target: document.body,
 		props: {}
 	});
-	let default_session: string = window.lightdm.default_session;
-	if (!default_session) {
-		if (window.lightdm.sessions.length > 0) {
-			default_session = window.lightdm.sessions[0].key;
-		} else {
-			console.warn("no session found to choose from?");
-		}
-	}
-	console.debug(`default_session is '${default_session}'`);
+
+	let default_session: string = computeDefaultSession();
+	console.debug(`session being used is '${default_session}'`);
 	selectedSession.update(_ => default_session);
 };
+
+function computeDefaultSession(): string {
+    let from_config = window.lightdm.default_session;
+
+    if (from_config) {
+        if (window.lightdm.sessions.find(k => k.key === from_config)) {
+            console.debug(`default session '${from_config}' configured, using it`);
+            return from_config;
+        } else {
+            if (window.lightdm.sessions.length > 0) {
+                console.warn(`default session '${from_config}' not found, using first session`);
+                return window.lightdm.sessions[0].key;
+            } else {
+                console.warn(`default session '${from_config}' not found, but also no sessions available to fallback to, attempting to use it anyway`)
+                return from_config;
+            }
+        }
+    }
+
+    if (window.lightdm.sessions.length > 0) {
+        console.debug("no default session configured, using first session");
+        return window.lightdm.sessions[0].key;
+    } else {
+        console.warn("no default session configured, and no sessions available to fallback to, using 'null'");
+        return null;
+    }
+}
   
-window.addEventListener("GreeterReady", initGreeter);
\ No newline at end of file
+window.addEventListener("GreeterReady", initGreeter);
