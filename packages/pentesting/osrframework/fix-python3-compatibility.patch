diff '--color=auto' -Naur a/osrframework/searchengines/__init__.py b/osrframework/searchengines/__init__.py
--- a/osrframework/searchengines/__init__.py	2024-04-21 16:09:47.353037527 +0200
+++ b/osrframework/searchengines/__init__.py	2024-04-21 16:11:34.601136976 +0200
@@ -15,9 +15,4 @@
 #	You should have received a copy of the GNU General Public License
 #	along with this program.  If not, see <http://www.gnu.org/licenses/>.
 #
-##################################################################################
-
-import osrframework.utils.logger as logger
-
-# Calling the logger when being imported
-logger.setupLogger(loggerName="osrframework.searchengines")
+##################################################################################
\ No newline at end of file
diff '--color=auto' -Naur a/osrframework/thirdparties/pipl_com/lib/__init__.py b/osrframework/thirdparties/pipl_com/lib/__init__.py
--- a/osrframework/thirdparties/pipl_com/lib/__init__.py	2024-04-21 16:12:47.298774028 +0200
+++ b/osrframework/thirdparties/pipl_com/lib/__init__.py	2024-04-21 16:13:13.365788499 +0200
@@ -19,13 +19,6 @@
 #
 ##################################################################################
 
-
-import osrframework.utils.logger
-
-# Calling the logger when being imported
-osrframework.utils.logger.setupLogger(loggerName="osrframework.thirdparties.pipl_com.lib")
-
-
 __version__ = '1.0'
 """Python implementation of Pipl's data model.
 The data model is basically Record/Person objects (avaialable in 
diff '--color=auto' -Naur a/osrframework/utils/exceptions.py b/osrframework/utils/exceptions.py
--- a/osrframework/utils/exceptions.py	2024-04-21 16:10:46.113822748 +0200
+++ b/osrframework/utils/exceptions.py	2024-04-21 16:11:52.208038719 +0200
@@ -47,7 +47,7 @@
             """.format(
             self.__class__.__name__,
             platform,
-            os.path.join(configuration.getConfigPath()["appPath"], "accounts.cfg"),
+            os.path.join(configuration.get_config_path()["appPath"], "accounts.cfg"),
             general.emphasis("-x " + platform)
         )
         OSRFrameworkException.__init__(self, general.warning(msg))
diff '--color=auto' -Naur a/osrframework/utils/updates.py b/osrframework/utils/updates.py
--- a/osrframework/utils/updates.py	2024-04-21 16:14:24.803515466 +0200
+++ b/osrframework/utils/updates.py	2024-04-21 16:15:12.014226544 +0200
@@ -18,75 +18,78 @@
 ################################################################################
 
 import xmlrpc.client
-try:
-    from pip._internal.utils.misc import get_installed_distributions
-except ImportError:  # pip<10
-    from pip import get_installed_distributions
+import xmlrpc.client
+import sys
+
+if sys.version_info >= (3, 8):
+	from importlib import metadata as importlib_metadata
+else:
+	import importlib_metadata
 
 
 class UpgradablePackage(object):
-    def __init__(self, package_name="osrframework",
-                 repository='https://pypi.python.org/pypi'):
-        """Checks if a locally installed package has an update
-
-        Args:
-            packake_name (str): The name of the package.
-            repository (str): Defines the repository. By default, the official
-                one.
-        """
-        installed_package = None
-        self.local_version = None
-        self.remote_version = None
-        self.repository = repository
-
-        for dist in get_installed_distributions():
-            if dist.project_name == package_name:
-                installed_package = dist
-                try:
-                    self.local_version = installed_package.version
-                except AttributeError:
-                    pass
-                break
-
-        pypi = xmlrpc.client .ServerProxy(repository)
-        # This is an array
-        version_available = pypi.package_releases(package_name)
-
-        try:
-            self.remote_version = version_available[0]
-            if version_available[0] < installed_package.version:
-                # No updates available
-                self.status = "unstable"
-            elif version_available[0] == installed_package.version:
-                # No updates available
-                self.status = "up-to-date"
-            else:
-                # There are updates available!
-                self.status = "outdated"
-        except IndexError:
-            self.status = "unknown"
-
-    def get_dict(self):
-        """Returns a dict representing the object representation
-
-        Returns:
-            A dict representing the information stored.
-        """
-        return {
-            "status": self.status,
-            "local_version": self.local_version,
-            "remote_version": self.remote_version,
-            "repository": self.repository,
-        }
-
-    def is_upgradable(self):
-        """Checks if a locally stored version of a file is outdated
-
-        Returns:
-            Bool if the local version is smaller than the remote one.
-        """
-        return self.local_version < self.remote_version
+	def __init__(self, package_name="osrframework",
+				 repository='https://pypi.python.org/pypi'):
+		"""Checks if a locally installed package has an update
+
+		Args:
+			packake_name (str): The name of the package.
+			repository (str): Defines the repository. By default, the official
+				one.
+		"""
+		installed_package = None
+		self.local_version = None
+		self.remote_version = None
+		self.repository = repository
+
+		for dist in importlib_metadata.distributions():
+			if dist.project_name == package_name:
+				installed_package = dist
+				try:
+					self.local_version = installed_package.version
+				except AttributeError:
+					pass
+				break
+
+		pypi = xmlrpc.client .ServerProxy(repository)
+		# This is an array
+		version_available = pypi.package_releases(package_name)
+
+		try:
+			self.remote_version = version_available[0]
+			if version_available[0] < installed_package.version:
+				# No updates available
+				self.status = "unstable"
+			elif version_available[0] == installed_package.version:
+				# No updates available
+				self.status = "up-to-date"
+			else:
+				# There are updates available!
+				self.status = "outdated"
+		except IndexError:
+			self.status = "unknown"
+
+	def get_dict(self):
+		"""Returns a dict representing the object representation
+
+		Returns:
+			A dict representing the information stored.
+		"""
+		return {
+			"status": self.status,
+			"local_version": self.local_version,
+			"remote_version": self.remote_version,
+			"repository": self.repository,
+		}
+
+	def is_upgradable(self):
+		"""Checks if a locally stored version of a file is outdated
+
+		Returns:
+			Bool if the local version is smaller than the remote one.
+		"""
+		return self.local_version < self.remote_version
 
 
 if __name__ == "__main__":
-    print(UpgradablePackage(package_name="osrframework").get_dict())
+	print(UpgradablePackage(package_name="osrframework").get_dict())
\ No newline at end of file
