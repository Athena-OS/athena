# Credits BlackArch ( https://www.blackarch.org/ ).
# See COPYING for license details.

pkgname=lorsrf
pkgver=2.1
pkgrel=1
pkgdesc='Find the parameters that can be used to find SSRF or Out-of-band resource load.'
groups=('role-bountyhunter' 'role-webpentester' 'role-redteamer' 'athena'
        'athena-webapp' 'athena-scanner')
arch=('x86_64' 'aarch64')
url="https://github.com/knassar702/lorsrf"
license=('GPL-3.0-only')
depends=('zlib' 'glibc' 'gcc-libs' 'openssl')
makedepends=('rust')
conflicts=($pkgname)
options=(!debug !lto)
source=($pkgname-$pkgver.tar.gz::$url/archive/refs/tags/v$pkgver.tar.gz)
b2sums=('4302d0b6be852bd9cfbf3c3de40e92da8bca06eb17cc338bc7ea8e5dc1aad33a51306e4edfb0cb885bfe23b76de7cdb4ba4c822e93cf11111424bb86d72b9316')

prepare() {
    cd $pkgname-$pkgver
    export CARGO_HOME=$srcdir/.cargo                 # Download all to src directory, not in ~/.cargo
    cargo fetch --target "$(rustc -vV | sed -n 's/host: //p')"
}


build() {
    cd $pkgname-$pkgver
    export RUSTFLAGS="--remap-path-prefix=$srcdir=/" # Prevent warning: 'Package contains reference to $srcdir'
    export CARGO_HOME=$srcdir/.cargo                 # Use downloaded earlier from src directory, not from ~/.cargo
    export CARGO_TARGET_DIR=target                   # Place the output in target relative to the current directory
    cargo build --frozen --release
}

package() {
    cd $pkgname-$pkgver
    install -Dm 755  target/release/$pkgname -t $pkgdir/usr/bin/
    install -Dm 644  parameters.txt          -t $pkgdir/usr/share/$pkgname/
}
