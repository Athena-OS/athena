.
.TH "BSQLBF" "" "July 2014" "" "General Information Manual"
.
.SH "NAME"
bsqlbf \- blind sql injection brute forcer
.
.SH "SYNOPSIS"
bsqlbf [\-url STRING] [OPTIONS]
.
.SH "DESCRIPTION"
This is a modified version of \'bsqlbfv1\.2\-th\.pl\'\. This perl script allows extraction of data from Blind SQL Injections\. It accepts custom SQL queries as a command line parameter and it works for both integer and string based injections\.
.
.SS "Databases Supported"
\fB0\fR: MS\-SQL
.
.P
\fB1\fR: MySQL
.
.P
\fB2\fR: PostgreSQL
.
.P
\fB3\fR: Oracle
.
.SS "Attack Modes"
\fBType 0\fR: Blind SQL Injection based on true and false conditions returned by back\-end server
.
.P
\fBType 1\fR: Blind SQL Injection based on true and error(e\.g syntax error) returned by back\-end server\.
.
.P
\fBType 2\fR: Blind SQL Injection in "order by" and "group by"\.
.
.P
\fBType 3\fR: extracting data with SYS privileges (ORACLE dbms_export_extension exploit)
.
.P
\fBType 4\fR: is O\.S code execution (ORACLE dbms_export_extension exploit)
.
.P
\fBType 5\fR: is reading files (ORACLE dbms_export_extension exploit, based on java)
.
.P
\fBType 6\fR: is O\.S code execution DBMS_REPCAT_RPC\.VALIDATE_REMOTE_RC exploit
.
.P
\fBType 7\fR: is O\.S code execution SYS\.KUPP$PROC\.CREATE_MASTER_PROCESS(), DBA Privs
.
.IP "" 4
.
.nf

\-cmd=revshell Type 7 supports meterpreter payload execution, run generator\.exe first
.
.fi
.
.IP "" 0
.
.P
\fBType 8\fR: is O\.S code execution DBMS_JAVA_TEST\.FUNCALL, with JAVA IO Permissions
.
.IP "" 4
.
.nf

\-cmd=revshell Type 8 supports meterpreter payload execution, run generator\.exe first
.
.fi
.
.IP "" 0
.
.SS "O\.S Code Execution Methods (Type 4)"
\fBSType 0\fR (default): is based on java\.\.will NOT work against XE\.
.
.P
\fBSType 1\fR: is against oracle 9 with plsql_native_make_utility\.
.
.P
\fBSType 2\fR: is against oracle 10 with dbms_scheduler\.
.
.SH "OPTIONS"
\fB\-sql\fR: valid SQL syntax to get; version(), database(), (select table_name from inforamtion_schema\.tables limit 1 offset 0)
.
.P
\fB\-get\fR: If MySQL user is root, supply word readable file name
.
.P
\fB\-blind\fR: parameter to inject sql\. Default is last value of url
.
.P
\fB\-match\fR: \fIRECOMMENDED\fR string to match in valid query (default is auto)
.
.P
\fB\-start\fR: if you know the beginning of the string, use it with this
.
.P
\fB\-length\fR: maximum length of value (default is 32)
.
.P
\fB\-time\fR: timer options:
.
.IP "" 4
.
.nf

0: dont wait (default)
1: wait 15 seconds
2: wait 5 minutes
.
.fi
.
.IP "" 0
.
.P
\fB\-type\fR: Type of injection:
.
.IP "" 4
.
.nf

0: Type 0 (default) is blind injection based on True and False responses
1: Type 1 is blind injection based on True and Error responses
2: Type 2 is injection in order by and group by
3: Type 3 is extracting data with SYS privileges (ORACLE dbms_export_extension exploit)
4: Type 4 is O\.S code execution (ORACLE dbms_export_extension exploit)
5: Type 5 is reading files (ORACLE dbms_export_extension exploit, based on java)
.
.fi
.
.IP "" 0
.
.P
\fB\-file\fR: File to read (default is C:\eboot\.ini)
.
.P
\fB\-stype\fR: How you want to execute command: 0: SType 0 (default) is based on java\.\.will NOT work against XE 1: SType 1 is against oracle 9 with plsql_native_make_utility 2: SType 2 is against oracle 10 with dbms_scheduler
.
.P
\fB\-database\fR: Backend database: 0: MS\-SQL (default) 1: MYSQL 2: POSTGRES 3: ORACLE
.
.P
\fB\-rtime\fR: wait random seconds, for example: "10\-20"
.
.P
\fB\-method\fR: http method to use; get or post (default is GET)
.
.P
\fB\-cmd\fR: command to execute (type 4 only) (default is "ping 127\.0\.0\.1\.")
.
.P
\fB\-uagent\fR: http UserAgent header to use (default is bsqlbf 2\.3)
.
.P
\fB\-ruagent\fR: file with random http UserAgent header to use
.
.P
\fB\-cookie\fR: http cookie header to use
.
.P
\fB\-rproxy\fR: use random http proxy from file list\.
.
.P
\fB\-proxy\fR: use proxy http\. Syntax \-proxy=http://proxy:port/ \-proxy_user: proxy http user
.
.P
\fB\-proxy_pass\fR: proxy http password
.
.SH "EXAMPLES"
.
.SS "Integer based Injection"
bsqlbf \-url http://www\.host\.com/path/script\.php?foo=1000 [options]
.
.SS "String Based Injection"
bsqlbf \-url http://www\.host\.com/path/script\.php?foo=bar\' [options]
.
.SS "Other Examples"
bsqlbf \-url http://www\.somehost\.com/blah\.php?u=5 \-blind u \-sql "select table_name from imformation_schema\.tables limit 1 offset 0" \-database 1 \-type 1
.
.P
bsqlbf \-url http://www\.buggy\.com/bug\.php?r=514&p=foo\' \-method post \-get "/etc/passwd" \-match "foo"
