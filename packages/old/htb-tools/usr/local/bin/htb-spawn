#!/bin/sh

RESTORE='\033[0m'

RED='\033[00;31m'
GREEN='\033[00;32m'
YELLOW='\033[00;33m'
BLUE='\033[00;34m'
PURPLE='\033[00;35m'
CYAN='\033[00;36m'
LIGHTGRAY='\033[00;37m'

LRED='\033[01;31m'
LGREEN='\033[01;32m'
LYELLOW='\033[01;33m'
LBLUE='\033[01;34m'
LPURPLE='\033[01;35m'
LCYAN='\033[01;36m'
WHITE='\033[01;37m'

###########################
print_info() {

    machine_name=$1
    machine_os=$2
    machine_ip=$3
    machine_points=$4
    machine_difficulty=$5
    machine_userflag=$6
    machine_rootflag=$7
    htb_user=$8
    htb_user_ip=$(ip -f inet addr show tun0 | sed -En -e 's/.*inet ([0-9.]+).*/\1/p')

    recipe_file="$HOME/target_info.txt"

    [ $machine_userflag != "null" ] && machine_userflag="Pwned" || machine_userflag="No"
    [ $machine_rootflag != "null" ] && machine_rootflag="Pwned" || machine_rootflag="No"
    
    echo
    echo -e "${LYELLOW}Our secret agent gathered some information about the target:${RESTORE}"
    echo -e "${LGREEN}┌────────────────────────────────────────────────────┐${RESTORE}" | tee $recipe_file
    echo -e "${LGREEN}| Target Name       : ${LCYAN}$machine_name${RESTORE}" | tee -a $recipe_file
    echo -e "${LGREEN}| Target OS         : ${LCYAN}$(echo $machine_os | tr -d \")${RESTORE}" | tee -a $recipe_file
    echo -e "${LGREEN}| Target IP         : ${LCYAN}$machine_ip${RESTORE}" | tee -a $recipe_file
    echo -e "${LGREEN}| Points            : ${LCYAN}$machine_points${RESTORE}" | tee -a $recipe_file
    echo -e "${LGREEN}| Difficulty        : ${LCYAN}$(echo $machine_difficulty | tr -d \")${RESTORE}" | tee -a $recipe_file
    echo -e "${LGREEN}| User Flag         : ${LCYAN}$machine_userflag${RESTORE}" | tee -a $recipe_file
    echo -e "${LGREEN}| Root Flag         : ${LCYAN}$machine_rootflag${RESTORE}" | tee -a $recipe_file
    echo -e "${LGREEN}|────────────────────────────────────────────────────|${RESTORE}" | tee -a $recipe_file
    echo -e "${LGREEN}| Attacker          : ${LRED}$(echo $htb_user | tr -d \")${RESTORE}" | tee -a $recipe_file
    echo -e "${LGREEN}| Attacker IP       : ${LRED}$htb_user_ip${RESTORE}" | tee -a $recipe_file
    echo -e "${LGREEN}└────────────────────────────────────────────────────┘${RESTORE}" | tee -a $recipe_file
    echo
    echo -e "${LYELLOW}The agent left this information in ${recipe_file}.${RESTORE}"
    echo
}

change_shell() {

    result=$(basename -- "$SHELL")
    machine_name=$1
    machine_ip=$2
    htb_user=$3
    machine_points=$4

    if [ $result = "bash" ]; then
      FILE="$HOME/.bashrc.htb.bak"
      if [ ! -f "$FILE" ]; then
         cp -rf $HOME/.bashrc $FILE
      fi
      sed -i "/PS1=/c\PS1=\"\\\\e[32m\\\\]┌──[Target:$machine_name🚀🌐IP:$machine_ip🔥\\\\e[34m\\\\]Attacker:$htb_user📡IP:\$(ip -f inet addr show tun0 | sed -En -e 's/.*inet ([0-9.]+).*/\\\1/p')\\\\e[32m\\\\]🏅Prize:$machine_points points]\\\\n└──╼[👾]\\\\[\\\\e[36m\\\\]\\\$(pwd) $ \\\\[\\\\e[0m\\\\]\"" $HOME/.bashrc
      source $HOME/.bashrc
    elif [ $result = "fish" ]; then
      FILE="$HOME/.config/fish/functions/fish_prompt.fish.htb.bak"
      if [ ! -f "$FILE" ]; then
         mv $HOME/.config/fish/functions/fish_prompt.fish $FILE
      fi
    cat <<EOF > $HOME/.config/fish/functions/fish_prompt.fish
function fish_prompt
    set_color 00ff00
    echo -n "┌──[Target:$machine_name🚀🌐IP:$machine_ip"
    set_color ff00d7
    echo -n "🔥Attacker:$htb_user📡IP:$(ip -f inet addr show tun0 | sed -En -e 's/.*inet ([0-9.]+).*/\1/p')"
    set_color 00ff00
    echo "🏅Prize:$machine_points points]"
    set_color 00ff00
    echo -n "└──╼[👾]"
    set_color 00ffff
    echo (pwd) '$' (set_color normal)
    end
EOF
      elif [ $result = "zsh" ]; then
          FILE="$HOME/.zshrc.htb.bak"
          if [ ! -f "$FILE" ]; then
             cp -rf $HOME/.zshrc $FILE
          fi
          sed -i "/PROMPT=/c\PROMPT=\"%F{46}┌──[Target:$machine_name🚀🌐IP:$machine_ip🔥%F{201}Attacker:$htb_user📡IP:\$(ip -f inet addr show tun0 | sed -En -e 's/.*inet ([0-9.]+).*/\\\1/p')🏅%F{46}Prize:$machine_points points]\"$'\\\\n'\"└──╼[👾]%F{44}%~ $%f \"" $HOME/.zshrc
      fi
}
###########################

if [[ $# -ne 1 ]] ; then
    echo 'Please, provide the Machine Name'
    exit 1
fi

machine_name=$1
htb_config="$HOME/.htb.conf"
change_prompt=$(cat $htb_config | grep "^prompt_change=" | awk -F"=" '{print $2}')
detect_virt=$(systemd-detect-virt)

if ([ $detect_virt == "docker" ] || [ $detect_virt == "podman" ]) && [ -z $DISPLAY ]; then
    appkey=$(cat /run/secrets/htb-api)
else
    appkey=$(secret-tool lookup htb-api user-htb-api)
fi

htb_user=$(curl -s --location --request GET "https://www.hackthebox.com/api/v4/user/info" -H "Authorization: Bearer $appkey" | jq '.info.name')

# Free VPN
VPNArray=("EUFree1" "EUFree2" "EUFree3" "USFree1" "USFree2" "USFree3" "AUFree1" "SGFree1")

# Append VIP VPN
## EU
for i in {1..28}; do
    VPNArray+=("EUVIP"$i)
done
## US
for i in {1..27}; do
    VPNArray+=("USVIP"$i)
done
## SG
for i in {1..2}; do
    VPNArray+=("SGVIP"$i)
done
VPNArray+=("AUVIP1")

# Append VIP+ VPN
## EU
for i in {1..2}; do
    VPNArray+=("EUVIP+"$i)
done
## US
VPNArray+=("USVIP+1")
## SG
VPNArray+=("SGVIP+1")

# Starting Point VPN
VPNArrayStartingPoint=("EUSPFree1" "EUSPVIP1" "USSPFree1" "USSPVIP1")

machine_json_file="$HOME/.machine.json"

{ # try # Test if the API key is valid

    curl -s --location --request GET "https://www.hackthebox.com/api/v4/machine/profile/$machine_name" -H "Authorization: Bearer $appkey" | jq > $machine_json_file

} || { # catch
    echo -e "\e[31mError. Maybe your API key is incorrect or expired. Renew your API key by running htb-update.\e[0m"
    rm -rf $machine_json_file
    exit 1
}

echo "Stopping any active machine..."
htb-stop

machine_os=$(cat $machine_json_file | jq '.info.os')
machine_points=$(cat $machine_json_file | jq '.info.points')
machine_userflag=$(cat $machine_json_file | jq '.info.authUserInUserOwns')
machine_rootflag=$(cat $machine_json_file | jq '.info.authUserInRootOwns')
machine_difficulty=$(cat $machine_json_file | jq '.info.difficultyText')

vpn_type=$(curl -s --location --request GET https://www.hackthebox.com/api/v4/connection/status -H "Authorization: Bearer $appkey" | jq '.[0].type' | tr -d '"')

if cat $machine_json_file | grep -q "Starting Point Machine"; then

    if ip -o link show | awk -F': ' '{print $2}' | grep -q tun  && [ "$vpn_type" == "Starting Point" ]; then
         echo "Starting Point VPN Server already running."
    else
      while [[ ! ${VPNArrayStartingPoint[*]} =~ (^|[[:space:]])$vpn_server($|[[:space:]]) ]] # Until the VPN input is not contained in the VPNArray variable, loop. Use of ':space:' for Exact match in the array
      do
         echo -e 'Please, provide one VPN server you prefer to connect:'
         echo -e "\e[36m┌────────────────────────────────────────────────────┐\e[0m"
         echo -e "\e[36m| Starting Point Free VPN : EUSPFree1 USSPFree1      |\e[0m"
         echo -e "\e[33m| Starting Point VIP VPN  : EUSPVIP1  USSPVIP1       |\e[0m"
         echo -e "\e[31m└────────────────────────────────────────────────────┘\e[0m"
         echo -ne "VPN Server:"
         read vpn_server
      done
      htb-vpn $vpn_server || exit # If the called script exits, also the calling script will exit
    fi

    # Compute the Machine ID for Starting Point machine
    for i in {1..3}; do
        j=0
        curl -s --location --request GET "https://www.hackthebox.com/api/v4/sp/tier/$i" -H "Authorization: Bearer $appkey" | jq > $machine_json_file
        count=$(jq -r '.data.machines | length' $machine_json_file)
        for sequence in $(seq $count)
        do
            let index=$sequence-1
            id=$(jq -r ".data.machines[$index].id" $machine_json_file)
            name=$(jq -r ".data.machines[$index].name" $machine_json_file)
            if [ "$name" == "$machine_name" ]; then
                machine_id=$id
            fi
        done
    done
    rm -rf $machine_json_file
    
    if curl -s --location --request POST https://www.hackthebox.com/api/v4/vm/spawn --data "{\"machine_id\":$machine_id}" -H "Content-Type: application/json" -H "Authorization: Bearer $appkey" | jq '.message' | grep -q "Machine deployed to lab."; then

        machine_ip=""
        echo "Waiting for IP address to be assigned to the target machine. It will take around 1 minute..."
        sleep 5
        while [ -z "$machine_ip" ] || [ "$machine_ip" == "null" ]; do            
            sleep 30 #Too many API requests could be blocked, so we sleep for 30 seconds.
            machine_ip=$(curl -s --location --request GET https://www.hackthebox.com/api/v4/sp/profile/$machine_id -H "Authorization: Bearer $appkey" | jq '.info.ip' | tr -d '"')
        done
        machine_points="0"

        printf '%b\n' "$(base64 -d <<<"H4sIAAAAAAAAA+1buw6DMAzc+xVZWlUoSlCZqn5K+wv8/9oHUgkQIEBCDtueqlOHi+/imICVihunsL+9yqp6lo/7rb42P+t1iB1CcVjqWAzxkW3ZCtJEkH0QvU5GtGWkQ8wnyG5tu0h5g0Y/XhqME2jsEno7RHmyxVkbT9Bdbl9sV2g0rnsiymeDf9At/cZjBTSSCXfDbHx9wSghXSsQOQTnVW6jQCO/RUdaMkbLTYgP0EiLnagjU7Yk239wtbXl1FQMEd00Vp1GC41jXiT3CZRva2g5gJ2bKNbbomhysOtlTHbjE3oKWYcwb3ecM5Gf8dmXfnyk17gx9aih/JJgiBSeh1K+ygNUqZHbAtFENBFNRBPRRDQRTUSTuJoc8jLKl0VhFN8bZzR66RAs8Tp2UnQvz6zuGu4XZJ/BC0R/oSUpHeJ+ET/4GJbR9bxCEL4hccjuY7v7vA48bDe2DjG5t5yhO9hlLx5rjc/8kD1wBVncoox5ZHpMUhyUsYxNRMAILtp6otXA0RG4BcnZ4O3J+cuWwxtaDodVdT0AAA==" | gunzip)" #User printf for colored output
        echo
        
        if [ $change_prompt = "true" ]; then
            change_shell $machine_name $machine_ip $htb_user $machine_points
        fi

        while true; do
            read -p $'\e[32mWould you like to assign a domain name to the target machine IP address and store it in /etc/hosts? (y/n) \e[0m' yn
            case $yn in
                [yY] )
                    domain_name="$(echo "$machine_name" | sed -e 's/\(.*\)/\L\1/').htb"
                    read -p "$(echo -e "\e[32mType the domain name to assign \e[31m[i.e., $domain_name]\e[32m: \e[0m")" ans
                    
                    if [ $detect_virt == "docker" ] || [ $detect_virt == "podman" ]; then
                        cp /etc/hosts ~/hosts.new
                        sed -i "2i$machine_ip  $ans" ~/hosts.new
                        sudo cp -f ~/hosts.new /etc/hosts
                        rm -rf ~/hosts.new
                    else    
                        sudo sed -i "2i$machine_ip  $ans" /etc/hosts #added on the 2nd line of /etc/hosts
                    fi
                    break;;
                [nN] ) break;;
                * ) echo "Invalid answer.";;
            esac
        done

        print_info $machine_name $machine_os $machine_ip $machine_points $machine_difficulty $machine_userflag $machine_userflag $htb_user
        #echo -e "Remember to activate the VPN for HTB Starting Point Machines."
        echo -e "\e[33mFor submitting the answers of the task questions, visit Hack The Box website: https://app.hackthebox.com/starting-point\e[0m"
        echo -e "\e[32mPlaying $machine_name. Good luck!\e[0m"
        echo
    elif curl -s --location --request POST https://www.hackthebox.com/api/v4/vm/spawn --data "{\"machine_id\":$machine_id}" -H "Content-Type: application/json" -H "Authorization: Bearer $appkey" | jq '.message' | grep -q "Machine is VIP only."; then
        echo "Machine is VIP only."
        echo
        exit 1
    elif curl -s --location --request POST https://www.hackthebox.com/api/v4/vm/spawn --data "{\"machine_id\":$machine_id}" -H "Content-Type: application/json" -H "Authorization: Bearer $appkey" | jq '.message' | grep -q "You must stop your active machine before spawning another one."; then
        echo "You must stop your active machine before spawning another one."
        echo
        exit 1
    fi
else

    if ip -o link show | awk -F': ' '{print $2}' | grep -q tun && ([ "$vpn_type" == "Free" ] || [ "$vpn_type" == "VIP" ] || [ "$vpn_type" == "VIP+" ]); then
         echo "Lab VPN Server already running."
    else
      while [[ ! ${VPNArray[*]} =~ (^|[[:space:]])$vpn_server($|[[:space:]]) ]] # Until the VPN input is not contained in the VPNArray variable, loop. Use of ':space:' for Exact match in the array
      do             
         echo 'Please, provide one VPN server you prefer to connect:'
         echo -e "\e[36m┌────────────────────────────────────────────────────┐\e[0m"
         echo -e "\e[36m| Machines Free VPN       : EUFree1 EUFree2 EUFree3  |\e[0m"
         echo -e "\e[36m|                           USFree1 USFree2 USFree3  |\e[0m"
         echo -e "\e[36m|                           AUFree1 SGFree1          |\e[0m"
         echo -e "\e[33m| Machines VIP VPN        : EUVIP1 to EUVIP28        |\e[0m"
         echo -e "\e[33m|                           USVIP1 to USVIP27        |\e[0m"
         echo -e "\e[33m|                           SGVIP1 SGVIP2 AUVIP1     |\e[0m"
         echo -e "\e[31m| Machines VIP+ VPN       : EUVIP+1 EUVIP+2          |\e[0m"
         echo -e "\e[31m|                         : USVIP+1 SGVIP+1          |\e[0m"
         echo -e "\e[36m└────────────────────────────────────────────────────┘\e[0m"
         echo -ne "VPN Server:"
         read vpn_server
      done
      htb-vpn $vpn_server || exit # If the called script exits, also the calling script will exit
    fi

    machine_id=$(curl -s --location --request GET "https://www.hackthebox.com/api/v4/machine/profile/$machine_name" -H "Authorization: Bearer $appkey" | jq .info.id)

    rm -rf $machine_json_file

    if curl -s --location --request POST "https://www.hackthebox.com/api/v4/machine/play/$machine_id" -H "Authorization: Bearer $appkey" | jq '.message' | grep -q "Playing"; then

        sleep 5
        machine_ip=$(curl -s --location --request GET "https://www.hackthebox.com/api/v4/machine/profile/$machine_name" -H "Authorization: Bearer $appkey" | jq '.info.ip' | tr -d '"') #Using the curl command instead of reading $machine_json_file because we get the IP address only AFTER the machine is run

        printf '%b\n' "$(base64 -d <<<"H4sIAAAAAAAAA+1buw6DMAzc+xVZWlUoSlCZqn5K+wv8/9oHUgkQIEBCDtueqlOHi+/imICVihunsL+9yqp6lo/7rb42P+t1iB1CcVjqWAzxkW3ZCtJEkH0QvU5GtGWkQ8wnyG5tu0h5g0Y/XhqME2jsEno7RHmyxVkbT9Bdbl9sV2g0rnsiymeDf9At/cZjBTSSCXfDbHx9wSghXSsQOQTnVW6jQCO/RUdaMkbLTYgP0EiLnagjU7Yk239wtbXl1FQMEd00Vp1GC41jXiT3CZRva2g5gJ2bKNbbomhysOtlTHbjE3oKWYcwb3ecM5Gf8dmXfnyk17gx9aih/JJgiBSeh1K+ygNUqZHbAtFENBFNRBPRRDQRTUSTuJoc8jLKl0VhFN8bZzR66RAs8Tp2UnQvz6zuGu4XZJ/BC0R/oSUpHeJ+ET/4GJbR9bxCEL4hccjuY7v7vA48bDe2DjG5t5yhO9hlLx5rjc/8kD1wBVncoox5ZHpMUhyUsYxNRMAILtp6otXA0RG4BcnZ4O3J+cuWwxtaDodVdT0AAA==" | gunzip)" #User printf for colored output
        echo

        if [ $machine_userflag != "null" ]; then
          echo "Hey! You have already found the User Flag! Nice one!"
        fi

        if [ $machine_rootflag != "null" ]; then
          echo "Hey! You have already found the Root Flag! Keep it up!"
        fi
        
        if [ $change_prompt = "true" ]; then
            change_shell $machine_name $machine_ip $htb_user $machine_points
        fi

        while true; do
            read -p $'\e[32mWould you like to assign a domain name to the target machine IP address and store it in /etc/hosts? (y/n) \e[0m' yn
            case $yn in
                [yY] ) 
                    domain_name="$(echo "$machine_name" | sed -e 's/\(.*\)/\L\1/').htb"
                    read -p "$(echo -e "\e[32mType the domain name to assign \e[31m[i.e., $domain_name]\e[32m: \e[0m")" ans
                    
                    if [ $detect_virt == "docker" ] || [ $detect_virt == "podman" ]; then
                        cp /etc/hosts ~/hosts.new
                        sed -i "2i$machine_ip  $ans" ~/hosts.new
                        sudo cp -f ~/hosts.new /etc/hosts
                        rm -rf ~/hosts.new
                    else    
                        sudo sed -i "2i$machine_ip  $ans" /etc/hosts #added on the 2nd line of /etc/hosts
                    fi
                    break;;
                [nN] ) break;;
                * ) echo "Invalid answer.";;
            esac
        done

        print_info $machine_name $machine_os $machine_ip $machine_points $machine_difficulty $machine_userflag $machine_userflag $htb_user
        #echo -e "Remember to activate the VPN for HTB Machines."
        echo -e "\e[32mPlaying $machine_name. Good luck!\e[0m"
        echo
    elif curl -s --location --request POST "https://www.hackthebox.com/api/v4/machine/play/$machine_id" -H "Authorization: Bearer $appkey" | jq '.message' | grep -q "Incorrect lab type."; then #It means the user has a VIP subscription, so it is needed to spawn the machine with a different API
        
        if curl -s --location --request POST https://www.hackthebox.com/api/v4/vm/spawn --data "{\"machine_id\":$machine_id}" -H "Content-Type: application/json" -H "Authorization: Bearer $appkey" | jq '.message' | grep -q "before spawning another machine."; then
            echo "\e[32mYou need to wait 2 minutes before spawning another machine.\e[0m"
            exit 1
        fi

        machine_ip=""
        echo "Waiting for IP address to be assigned to the target machine. It will take around 1 minute..."
        sleep 5
        
        while [ -z "$machine_ip" ] || [ "$machine_ip" == "null" ]; do            
            sleep 30 #Too many API requests could be blocked, so we sleep for 30 seconds.
            machine_ip=$(curl -s --location --request GET "https://www.hackthebox.com/api/v4/machine/profile/$machine_name" -H "Authorization: Bearer $appkey" | jq '.info.ip' | tr -d '"') #Using the curl command instead of reading $machine_json_file because we get the IP address only AFTER the machine is run
        done 
        
        printf '%b\n' "$(base64 -d <<<"H4sIAAAAAAAAA+1buw6DMAzc+xVZWlUoSlCZqn5K+wv8/9oHUgkQIEBCDtueqlOHi+/imICVihunsL+9yqp6lo/7rb42P+t1iB1CcVjqWAzxkW3ZCtJEkH0QvU5GtGWkQ8wnyG5tu0h5g0Y/XhqME2jsEno7RHmyxVkbT9Bdbl9sV2g0rnsiymeDf9At/cZjBTSSCXfDbHx9wSghXSsQOQTnVW6jQCO/RUdaMkbLTYgP0EiLnagjU7Yk239wtbXl1FQMEd00Vp1GC41jXiT3CZRva2g5gJ2bKNbbomhysOtlTHbjE3oKWYcwb3ecM5Gf8dmXfnyk17gx9aih/JJgiBSeh1K+ygNUqZHbAtFENBFNRBPRRDQRTUSTuJoc8jLKl0VhFN8bZzR66RAs8Tp2UnQvz6zuGu4XZJ/BC0R/oSUpHeJ+ET/4GJbR9bxCEL4hccjuY7v7vA48bDe2DjG5t5yhO9hlLx5rjc/8kD1wBVncoox5ZHpMUhyUsYxNRMAILtp6otXA0RG4BcnZ4O3J+cuWwxtaDodVdT0AAA==" | gunzip)" #User printf for colored output
        echo

        if [ $machine_userflag != "null" ]; then
          echo "Hey! You have already found the User Flag! Nice one!"
        fi

        if [ $machine_rootflag != "null" ]; then
          echo "Hey! You have already found the Root Flag! Keep it up!"
        fi
        
        if [ $change_prompt = "true" ]; then
            change_shell $machine_name $machine_ip $htb_user $machine_points
        fi

        while true; do
            read -p $'\e[32mWould you like to assign a domain name to the target machine IP address and store it in /etc/hosts? (y/n) \e[0m' yn
            case $yn in
                [yY] ) 
                    domain_name="$(echo "$machine_name" | sed -e 's/\(.*\)/\L\1/').htb"
                    read -p "$(echo -e "\e[32mType the domain name to assign \e[31m[i.e., $domain_name]\e[32m: \e[0m")" ans
                    
                    if [ $detect_virt == "docker" ] || [ $detect_virt == "podman" ]; then
                        cp /etc/hosts ~/hosts.new
                        sed -i "2i$machine_ip  $ans" ~/hosts.new
                        sudo cp -f ~/hosts.new /etc/hosts
                        rm -rf ~/hosts.new
                    else    
                        sudo sed -i "2i$machine_ip  $ans" /etc/hosts #added on the 2nd line of /etc/hosts
                    fi
                    break;;
                [nN] ) break;;
                * ) echo "Invalid answer.";;
            esac
        done

        print_info $machine_name $machine_os $machine_ip $machine_points $machine_difficulty $machine_userflag $machine_userflag $htb_user
        #echo -e "Remember to activate the VPN for HTB Machines."
        echo -e "\e[32mPlaying $machine_name. Good luck!\e[0m"
        echo 

    elif curl -s --location --request POST "https://www.hackthebox.com/api/v4/machine/play/$machine_id" -H "Authorization: Bearer $appkey" | jq '.message' | grep -q "Machine is VIP only"; then
        echo "Machine is VIP only."
        echo
        exit 1
    elif curl -s --location --request POST "https://www.hackthebox.com/api/v4/machine/play/$machine_id" -H "Authorization: Bearer $appkey" | jq '.message' | grep -q "Machine is on Release Arena"; then
        echo "Machine is on Release Arena."
        echo
        exit 1
    fi
fi
